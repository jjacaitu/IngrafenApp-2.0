
class Clientes_ot(models.Model):
    nombre = models.ForeignKey(Clientes, on_delete=models.PROTECT, related_name="client_razon_social")
    nombre_razon_social = models.CharField(max_length=40)
    vendedor_asociado = models.CharField(max_length=20, blank=True)
    usuario = models.CharField(max_length=20, blank=True)
    codigo = models.CharField(max_length=20)
    desactivado = models.BooleanField(default=False)
    def save(self):
       self.nombre_razon_social = self.nombre_razon_social.title()
       super(Clientes_ot, self).save()

    def __str__(self):
        return str(self.codigo) + " " + str(self.nombre_razon_social)

class OrdenesSolicitadas(models.Model):
    num_solicitud_ot = models.AutoField(primary_key = True)
    vendedor_ot = models.CharField(max_length=20, blank=True)
    trabajo_ot = models.CharField(max_length=40)
    nombre_cliente_ot = models.ForeignKey(Clientes_ot, on_delete=models.PROTECT, related_name="client_ot")
    tipo_trabajo_ot = models.CharField(max_length=30,null=True,blank=True)
    cantidad_ot = models.IntegerField()

    material_ot = models.CharField(max_length=30,null=True,blank=True)
    descripcion_material_ot = models.CharField(max_length=30,null=True,blank=True)
    medida_alto_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)])
    medida_ancho_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)])
    impresion_tiro_ot = models.CharField(max_length=30,null=True,blank=True)
    impresion_retiro_ot = models.CharField(max_length=30,null=True,blank=True)
    uv_ot = models.CharField(max_length=30,null=True,blank=True)
    laminado_ot = models.CharField(max_length=30,null=True,blank=True)
    troquelado_ot = models.CharField(max_length=30,null=True,blank=True)

    material2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    medida_alto_2_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    medida_ancho_2_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    descripcion_material2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    impresion_tiro2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    impresion_retiro2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    uv2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    laminado2_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    troquelado2_ot = models.CharField(max_length=30,null=True,blank=True,default="")

    material3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    medida_alto_3_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    medida_ancho_3_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    descripcion_material3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    impresion_tiro3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    impresion_retiro3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    uv3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    laminado3_ot = models.CharField(max_length=30,null=True,blank=True,default="")
    troquelado3_ot = models.CharField(max_length=30,null=True,blank=True,default="")

    material4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    medida_alto_4_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    medida_ancho_4_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)], default=0)
    descripcion_material4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    impresion_tiro4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    impresion_retiro4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    uv4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    laminado4_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    troquelado4_ot = models.CharField(max_length=30,null=True,blank=True, default="")

    material5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    medida_alto_5_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)],default=0)
    medida_ancho_5_ot = models.FloatField(null=True,blank=True,validators=[MaxValueValidator(99)],default=0)
    descripcion_material5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    impresion_tiro5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    impresion_retiro5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    uv5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    laminado5_ot = models.CharField(max_length=30,null=True,blank=True, default="")
    troquelado5_ot = models.CharField(max_length=30,null=True,blank=True, default="")


    fecha_solicitada_ot = models.DateTimeField(auto_now_add=True)

    detalles_ot = models.CharField(max_length=300, blank=True,null=True)
    fecha_completada_ot = models.DateTimeField(auto_now=False, blank=True, null=True)
    cotizador_ot = models.CharField(max_length=20, blank=True)
    numero_cotizacion_ot = models.CharField(max_length=20, blank=True)
    fecha_entrega_ot = models.DateField(blank=True,null=True)
    fecha_entregada = models.DateField(blank=True,null=True)
    procesado_por_ot = models.CharField(max_length=25,default=" ",blank=True)

    estado_ot = models.CharField(max_length=25,default="Por aperturar",blank=True)
    num_ot_relacionada = models.CharField(max_length=20, blank=True, default= "")
    solicitud_cot = models.CharField(max_length=20, blank=True, default= "")
    direccion_entrega = models.CharField(max_length=50, blank=True)
    persona_recibe = models.CharField(max_length=20, blank=True)
    forma_empaque = models.CharField(max_length=20, blank=True)

    arte = models.BooleanField(default=False)
    dummie = models.BooleanField(default=False)
    machote = models.BooleanField(default=False)
    prueba_de_color = models.BooleanField(default=False)
    muestra_real = models.BooleanField(default=False)

    precio_ot = models.FloatField(null=True,blank=True, default=0)
    material_confirmado =  models.BooleanField(default=False)

    tipo_impresion = models.CharField(max_length=10,choices=tipo_impresion)

    def __str__(self):
        return "#{},cliente: {},trabajo: {}".format(str(self.num_solicitud_ot),str(self.nombre_cliente_ot),str(self.tipo_trabajo_ot))









        @login_required
        def ordenes_sin_fecha(request):
            buscar = False
            ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)
            hoy = datetime.today().date()
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            if request.method == "GET":
                if request.user.categoria == "VEN":
                    ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(vendedor_ot=request.user).filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
                else:
                    ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
                print(ordenes_por_fecha)
                return render(request, "ordenes_sin_fecha.html",{"hoy":hoy,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})
            elif request.method == "POST" and request.POST.get("boton_regresar") == "REGRESAR":
                buscar=False
                if request.user.categoria == "VEN":
                    ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(vendedor_ot=request.user).filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
                else:
                    ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
                return render(request, "ordenes_sin_fecha.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})

            elif request.method == "POST" and request.POST.get("boton_fecha") == "ESTABLECER FECHA DE ENTREGA":
                buscar=False
                numero_1 = request.POST.get("numero1")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)

                orden.fecha_entrega_ot = request.POST.get("fecha")





                orden.save()
                return HttpResponseRedirect(reverse('ordenes_sin_fecha'))


            elif request.method == "POST":
                buscar = True
                numero_a_ver = request.POST.get("numero")
                ordenes_por_fecha = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
                orden_existentes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada=numero_a_ver)
                hoy = datetime.today().date()
                return render(request, "ordenes_sin_fecha.html",{"hoy":hoy,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"orden_existentes":orden_existentes, "buscar":buscar, "numero_a_ver":numero_a_ver, "ordenes_existentes":ordenes_existentes})


        @login_required
        def confirmacion_material(request):
            ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")
            ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
            buscar = False
            if request.method == "POST" and request.POST.get("confirmado"):
                orden_a_confirmar = models.OrdenesSolicitadas.objects.get(num_solicitud_ot=request.POST.get("orden_a_confirmar"))
                orden_a_confirmar.material_confirmado = True
                orden_a_confirmar.save()

            return render(request, "ordenes_confirmar_material.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"buscar":buscar,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_proceso":ordenes_proceso,"ordenes_por_confirmar":ordenes_por_confirmar,"cotizaciones_existentes":cotizaciones_existentes,})


        @login_required
        def ordenes_en_proceso(request):
            buscar = False
            ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)
            hoy = datetime.today().date()
            print(hoy)
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")
            ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
            if request.method == "GET":
                if request.user.categoria == "VEN":
                    ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(vendedor_ot=request.user).order_by("fecha_entrega_ot")
                else:
                    ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
                print(ordenes_proceso)
                return render(request, "ordenes_en_proceso.html",{"hoy":hoy,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})
            elif request.method == "POST" and request.POST.get("boton_regresar") == "REGRESAR":
                buscar=False
                if request.user.categoria == "VEN":
                    ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(vendedor_ot=request.user).order_by("fecha_entrega_ot")
                else:
                    ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
                return render(request, "ordenes_en_proceso.html",{"hoy":hoy,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})

            elif request.method == "POST" and request.POST.get("boton_terminado") == "ORDEN TERMINADA":
                buscar=False
                numero_1 = request.POST.get("numero1")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)

                orden.estado_ot = "Orden terminada"
                orden.save()
                return HttpResponseRedirect(reverse('ordenes_en_proceso'))

            elif request.method == "POST" and request.POST.get("boton_cerrar") == "CERRAR OT":
                buscar=False
                numero_1 = request.POST.get("numero1")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)

                orden.estado_ot = "Cerrada"
                orden.fecha_entregada = datetime.now()




                orden.save()
                return HttpResponseRedirect(reverse('ordenes_en_proceso'))
            elif request.method == "POST" and request.POST.get("boton_parcial") == "ENTREGA PARCIAL":
                buscar=False
                numero_1 = request.POST.get("numero1")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)

                if orden.estado_ot == "Orden aperturada" or orden.estado_ot == "Orden terminada":
                    orden.estado_ot = "Parcial entregado: " + str(request.POST.get("cantidad_entregada"))
                    orden.fecha_entregada = datetime.now()
                else:
                    cantidad_parcial = orden.estado_ot.split()
                    cantidad_calculada = int(cantidad_parcial[-1]) + int(request.POST.get("cantidad_entregada"))
                    orden.estado_ot = "Parcial entregado: " + str(cantidad_calculada)
                    orden.fecha_entregada = datetime.now()







                orden.save()
                return HttpResponseRedirect(reverse('ordenes_en_proceso'))

                #return render(request,"ordenes_en_proceso.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"orden_completada":orden_completada,"buscar":buscar,"numero_a_ver":numero_a_ver})


            elif request.method == "POST":
                buscar = True
                numero_a_ver = request.POST.get("numero")

                orden_existentes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada=numero_a_ver)
                return render(request, "ordenes_en_proceso.html",{"hoy":hoy,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"orden_existentes":orden_existentes, "buscar":buscar, "numero_a_ver":numero_a_ver, "ordenes_existentes":ordenes_existentes})



        @login_required
        def ordenes_aperturadas(request):
            ver = False
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)

            ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
            clientes_creados = models.Clientes.objects.all().order_by("nombre")
            trabajos_creados = models.TipoDeTrabajo.objects.all().order_by("trabajo")
            cotizadores = models.Usuarios.objects.all().filter(categoria="COT").order_by("username")
            vendedores = models.Usuarios.objects.all().filter(categoria="VEN").order_by("username")
            tipo_busqueda = ""
            if request.method == "GET" and request.user.categoria == "VEN":
                ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                paginator = Paginator(ordenes,10)
                page = request.GET.get('page')
                ordenes_completadas = paginator.get_page(page)
                return render(request,"ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            elif request.method == "POST" and request.POST.get("tipo_busqueda"):

                desde = request.POST.get("desde")
                hasta = request.POST.get("hasta")
                print("AQUIIII",desde,hasta)
                if request.user.categoria == "VEN":
                    if request.POST.get("tipo_busqueda") == "Trabajo":
                        tipo_busqueda = "Trabajo"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.all().filter(tipo_trabajo_ot=request.POST.get("busqueda")).filter(vendedor_ot=request.user).filter(fecha_completada_ot_ot__range=[desde,hasta]).exclude(cotizador__exact="").order_by("-fecha_solicitada_ot")
                    elif request.POST.get("tipo_busqueda") == "Cliente":
                        print(request.POST.get("cl"))
                        tipo_busqueda = "Cliente"
                        busqueda = request.POST.get("busqueda")
                        b = models.Clientes.objects.get(nombre=request.POST.get("busqueda"))
                        ordenes = b.client.all().filter(fecha_completada_ot_ot__range=[str(desde),str(hasta)]).exclude(cotizador_ot__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")


                    elif request.POST.get("tipo_busqueda") == "Todo":
                        print("TODO")
                        tipo_busqueda = "Todo"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")



                    elif request.POST.get("tipo_busqueda") == "Solicitud":
                        ordenes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=request.POST.get("busqueda")).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Solicitud"
                        busqueda = request.POST.get("busqueda")
                    elif request.POST.get("tipo_busqueda") == "Orden":
                        ordenes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada__istartswith=request.POST.get("busqueda")).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Orden"
                        busqueda = request.POST.get("busqueda")
                    elif request.POST.get("tipo_busqueda") == "Promocion":
                        ordenes = OrdenesSolicitadas.objects.all().filter(trabajo_ot__istartswith=request.POST.get("busqueda")).filter(fecha_completada_ot__range=[desde,hasta]).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Promocion"
                        busqueda = request.POST.get("busqueda")
                else:
                    if request.POST.get("tipo_busqueda") == "trabajo_ot":
                        tipo_busqueda = "trabajo_ot"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.all().filter(tipo_trabajo_ot=request.POST.get("busqueda")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador__exact="").order_by("-fecha_solicitada_ot")
                    elif request.POST.get("tipo_busqueda") == "Cliente":
                        print(request.POST.get("cl"))
                        tipo_busqueda = "Cliente"
                        busqueda = request.POST.get("busqueda")
                        b = models.Clientes.objects.get(nombre=request.POST.get("busqueda"))
                        ordenes = b.client.all().filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")


                    elif request.POST.get("tipo_busqueda") == "Todo":
                        print("TODO")
                        tipo_busqueda = "Todo"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")


                    elif request.POST.get("tipo_busqueda") == "Vendedor":
                        tipo_busqueda = "Vendedor"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.all().filter(vendedor_ot=request.POST.get("busqueda")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador__exact="").order_by("-fecha_solicitada_ot")
                    elif request.POST.get("tipo_busqueda") == "Cotizador":
                        tipo_busqueda = "Cotizador"
                        busqueda = request.POST.get("busqueda")
                        ordenes = OrdenesSolicitadas.objects.all().filter(cotizador_ot=request.POST.get("busqueda")).filter(fecha_completada_ot__range=[desde,hasta]).order_by("-fecha_solicitada_ot")
                    elif request.POST.get("tipo_busqueda") == "Solicitud":
                        ordenes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=request.POST.get("busqueda")).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Solicitud"
                        busqueda = request.POST.get("busqueda")
                    elif request.POST.get("tipo_busqueda") == "Orden":
                        ordenes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada__istartswith=request.POST.get("busqueda")).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Orden"
                        busqueda = request.POST.get("busqueda")
                    elif request.POST.get("tipo_busqueda") == "Promocion":
                        ordenes = OrdenesSolicitadas.objects.all().filter(trabajo_ot__istartswith=request.POST.get("busqueda")).filter(fecha_completada_ot__range=[desde,hasta]).order_by("-fecha_solicitada_ot")
                        tipo_busqueda = "Promocion"
                        busqueda = request.POST.get("busqueda")
                paginator = Paginator(ordenes,10)
                if request.POST.get("boton") == "siguiente":
                    page = request.POST.get("pagina_siguiente")
                else:
                    page = request.POST.get("pagina_anterior")
                ordenes_completadas = paginator.get_page(page)

                return render(request,"ordenes_aperturadas.html",{"desde":desde,"hasta":hasta,"tipo_busqueda":tipo_busqueda,"busqueda":busqueda,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            elif request.method == "POST" and request.POST.get("boton") == "siguiente":
                if request.user.categoria == "VEN":
                    ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                else:
                    ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                paginator = Paginator(ordenes,10)
                page = request.POST.get("pagina_siguiente")
                ordenes_completadas = paginator.get_page(page)
                return render(request,"ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            elif request.method == "POST" and request.POST.get("boton") == "anterior":
                if request.user.categoria == "VEN":
                    ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                else:
                    ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                paginator = Paginator(ordenes,10)
                page = request.POST.get("pagina_anterior")
                ordenes_completadas = paginator.get_page(page)
                return render(request,"ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            elif request.method == "GET":
                ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                paginator = Paginator(ordenes,10)
                print("aqui")
                page = request.GET.get('page')
                ordenes_completadas = paginator.get_page(page)
                print("prueba")

                return render(request,"ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            if request.method == "POST" and request.POST.get("buscar") == "BUSCAR":
                if request.user.categoria == "VEN":
                    try:
                        ver = False
                        desde = request.POST.get("desde")
                        hasta = request.POST.get("hasta")
                        print("DESDE",desde)
                        print("HASTA",hasta)

                        print("SIRVE " + request.POST.get("parametro"))
                        if request.POST.get("seleccion") == "Cliente":
                            print(request.POST.get("cl"))
                            b = models.Clientes.objects.get(nombre=request.POST.get("cl"))
                            ordenes = b.client.all().filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                            tipo_busqueda = "Cliente"
                            busqueda = request.POST.get("cl")

                        elif request.POST.get("seleccion") == "Todo":
                            print("TODO")
                            tipo_busqueda = "Todo"
                            busqueda = ""
                            ordenes = OrdenesSolicitadas.objects.filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")

                        elif request.POST.get("seleccion") == "Trabajo":
                            tipo_busqueda = "Trabajo"
                            busqueda = request.POST.get("tr")
                            ordenes = OrdenesSolicitadas.objects.all().filter(tipo_trabajo=request.POST.get("tr")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador__exact="").filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Vendedor":
                            tipo_busqueda = "Vendedor"
                            busqueda = request.POST.get("ven")
                            ordenes = OrdenesSolicitadas.objects.all().filter(vendedor_ot=request.POST.get("ven")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador__exact="").order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Cotizador":
                            tipo_busqueda = "Cotizador"
                            busqueda = request.POST.get("cot")
                            ordenes = OrdenesSolicitadas.objects.all().filter(cotizador_ot=request.POST.get("cot")).filter(fecha_completada_ot__range=[desde,hasta]).order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Solicitud":
                            ordenes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=request.POST.get("parametro")).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                            tipo_busqueda = "Solicitud"
                            busqueda = request.POST.get("parametro")
                        elif request.POST.get("seleccion") == "Orden":
                            ordenes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada__istartswith=request.POST.get("parametro")).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                            tipo_busqueda = "Orden"
                            busqueda = request.POST.get("parametro")
                        elif request.POST.get("seleccion") == "Promocion":
                            tipo_busqueda = "Promocion"
                            busqueda = request.POST.get("parametro")
                            ordenes = OrdenesSolicitadas.objects.all().filter(trabajo_ot__istartswith=request.POST.get("parametro")).filter(fecha_completada_ot__range=[desde,hasta]).filter(vendedor_ot=request.user).order_by("-fecha_solicitada_ot")
                        print("si")
                        clientes_creados = models.Clientes.objects.all().order_by("nombre")
                        trabajos_creados = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                        cotizadores = models.Usuarios.objects.all().filter(categoria="COT").order_by("username")
                        vendedores = models.Usuarios.objects.all().filter(categoria="VEN").order_by("username")
                        paginator = Paginator(ordenes,10)
                        page = request.GET.get('page')
                        ordenes_completadas = paginator.get_page(page)
                        return render(request,"ordenes_aperturadas.html",{"busqueda":busqueda,"desde":desde,"hasta":hasta,"tipo_busqueda":tipo_busqueda,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"ver":ver,"cotizadores":cotizadores,"vendedores":vendedores,"cotizaciones_existentes":cotizaciones_existentes})
                    except:

                        return render(request, "ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"cotizaciones_existentes":cotizaciones_existentes,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"ver":ver,"cotizadores":cotizadores,"vendedores":vendedores})

                else:
                    try:
                        ver = False
                        desde = request.POST.get("desde")
                        hasta = request.POST.get("hasta")
                        print("DESDE",desde)
                        print("HASTA",hasta)

                        print("SIRVE " + request.POST.get("parametro"))
                        if request.POST.get("seleccion") == "Cliente":
                            print(request.POST.get("cl"))
                            b = models.Clientes.objects.get(nombre=request.POST.get("cl"))
                            ordenes = b.client.all().filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                            tipo_busqueda = "Cliente"
                            busqueda = request.POST.get("cl")

                        elif request.POST.get("seleccion") == "Todo":
                            print("TODO")
                            tipo_busqueda = "Todo"
                            busqueda = ""
                            ordenes = OrdenesSolicitadas.objects.filter(fecha_completada_ot__range=[str(desde),str(hasta)]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")

                        elif request.POST.get("seleccion") == "Trabajo":
                            tipo_busqueda = "Trabajo"
                            busqueda = request.POST.get("tr")
                            ordenes = OrdenesSolicitadas.objects.all().filter(tipo_trabajo_ot=request.POST.get("tr")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Vendedor":
                            tipo_busqueda = "Vendedor"
                            busqueda = request.POST.get("ven")

                            ordenes = OrdenesSolicitadas.objects.all().filter(vendedor_ot=request.POST.get("ven")).filter(fecha_completada_ot__range=[desde,hasta]).exclude(cotizador_ot__exact="").order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Cotizador":
                            tipo_busqueda = "Cotizador"
                            busqueda = request.POST.get("cot")
                            ordenes = OrdenesSolicitadas.objects.all().filter(cotizador_ot=request.POST.get("cot")).filter(fecha_completada_ot__range=[desde,hasta]).order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Solicitud":
                            tipo_busqueda = "Solicitud"
                            busqueda = request.POST.get("parametro")
                            ordenes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=request.POST.get("parametro")).order_by("-fecha_solicitada_ot")
                        elif request.POST.get("seleccion") == "Orden":
                            tipo_busqueda = "Orden"
                            busqueda = request.POST.get("parametro")
                            ordenes = OrdenesSolicitadas.objects.all().filter(num_ot_relacionada__istartswith=request.POST.get("parametro")).order_by("-fecha_solicitada_ot")

                        elif request.POST.get("seleccion") == "Promocion":
                            tipo_busqueda = "Promocion"
                            busqueda = request.POST.get("parametro")
                            ordenes = OrdenesSolicitadas.objects.all().filter(trabajo_ot__istartswith=request.POST.get("parametro")).filter(fecha_completada_ot__range=[desde,hasta]).order_by("-fecha_solicitada_ot")
                        print("si")
                        clientes_creados = models.Clientes.objects.all().order_by("nombre")
                        trabajos_creados = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                        cotizadores = models.Usuarios.objects.all().filter(categoria="COT").order_by("username")
                        vendedores = models.Usuarios.objects.all().filter(categoria="VEN").order_by("username")
                        paginator = Paginator(ordenes,10)
                        page = request.GET.get('page')
                        ordenes_completadas = paginator.get_page(page)
                        return render(request,"ordenes_aperturadas.html",{"busqueda":busqueda,"desde":desde,"hasta":hasta,"tipo_busqueda":tipo_busqueda,"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ordenes_completadas":ordenes_completadas,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"ver":ver,"cotizadores":cotizadores,"vendedores":vendedores,"cotizaciones_existentes":cotizaciones_existentes})
                    except:

                        return render(request, "ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"ver":ver,"cotizadores":cotizadores,"vendedores":vendedores})
            if request.method == "POST" and request.POST.get("ver") == "ver orden":
                ver = True

                orden_buscada = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=request.POST.get("cot_ver"))
                return render(request, "ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"orden_buscada":orden_buscada,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"ver":ver,"cotizadores":cotizadores,"vendedores":vendedores,"cotizaciones_existentes":cotizaciones_existentes})


            if request.method == "POST" and request.POST.get("regresar") == "REGRESAR":
                ver = False
                ordenes = OrdenesSolicitadas.objects.all().exclude(cotizador_ot__exact="")
                paginator = Paginator(ordenes,10)
                page = request.GET.get('page')
                ordenes_completadas = paginator.get_page(page)
                return render(request,"ordenes_aperturadas.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_completadas":ordenes_completadas,"ver":ver,"clientes_creados":clientes_creados,"trabajos_creados":trabajos_creados,"cotizadores":cotizadores,"vendedores":vendedores, "cotizaciones_existentes":cotizaciones_existentes})

            if request.method == "POST" and request.POST.get("reutilizar") == "REUTILIZAR":
                cot = request.POST.get("cot_reutilizar")
                request.session['cot'] = cot

                return HttpResponseRedirect(reverse('solicitud'))

                #return render(request, "solicitud.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ver_cinta":ver_cinta,"orden":orden,"tipo_trabajo":tipo_trabajo,"materiales":materiales,"busqueda":busqueda,"orden_encontrada":orden_encontrada,"ordenes_existentes":ordenes_existentes} )


        @login_required
        def ordenes_por_aperturar(request):
            buscar = False
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)

            if request.method == "GET":
                if request.user.categoria == "VEN":
                    ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="").filter(vendedor_ot=request.user)
                else:
                    ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
                print(ordenes_existentes)
                return render(request, "ordenes_por_aperturar.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})
            elif request.method == "POST" and request.POST.get("boton_regresar") == "REGRESAR":
                buscar=False
                if request.user.categoria == "VEN":
                    ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="").filter(vendedor_ot=request.user)
                else:
                    ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
                return render(request, "ordenes_por_aperturar.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"ordenes_existentes":ordenes_existentes,"buscar":buscar})

            elif request.method == "POST" and request.POST.get("boton_completar") == "COMPLETAR":
                buscar=False
                numero_1 = request.POST.get("numero1")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)
                cot = CotizacionesSolicitadas.objects.get(solicitud_ot=numero_1)
                orden.fecha_completada_ot = datetime.now()
                orden.cotizador_ot = str(request.user)
                orden.num_ot_relacionada = request.POST.get("orden_papyrus")
                orden.estado_ot = "Orden aperturada"
                cot.num_ot_relacionada = request.POST.get("orden_papyrus")

                orden.save()
                cot.save()
                return HttpResponseRedirect(reverse('ordenes_por_aperturar'))
            elif request.method == "POST" and request.POST.get("asignar") == "ASIGNAR":
                buscar = True
                numero_1 = request.POST.get("numero1")
                orden_existentes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=numero_1)
                ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
                orden = OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_1)
                orden.procesado_por_ot = str(request.user)
                orden.save()

                return render(request, "ordenes_por_aperturar.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"orden_existentes":orden_existentes, "buscar":buscar, "numero_a_ver":numero_1, "ordenes_existentes":ordenes_existentes})


                #return render(request,"ordenes_por_aperturar.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"orden_completada":orden_completada,"buscar":buscar,"numero_a_ver":numero_a_ver})


            elif request.method == "POST":
                buscar = True
                numero_a_ver = request.POST.get("numero")
                ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
                orden_existentes = OrdenesSolicitadas.objects.all().filter(num_solicitud_ot=numero_a_ver)
                return render(request, "ordenes_por_aperturar.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"cotizaciones_existentes":cotizaciones_existentes,"orden_existentes":orden_existentes, "buscar":buscar, "numero_a_ver":numero_a_ver, "ordenes_existentes":ordenes_existentes})



        def solicitud_ot(request):
            solicitado = False
            tipo_trabajo = ""
            busqueda = False
            aprobada = False
            materiales = ""
            ordenes_existentes = OrdenesSolicitadas.objects.all().filter(cotizador_ot__exact="")
            ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
            ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")
            ordenes_por_confirmar = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").exclude(material_confirmado=True)

            numero_solicitud = ""
            tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
            materiales = models.Materiales.objects.all().order_by("material")
            cotizaciones_existentes = CotizacionesSolicitadas.objects.all().filter(cotizador__exact="")



            if request.method == "GET" and 'tipo_trabajo' in request.session:
                if request.session['tipo_trabajo'] != "":
                    ver_cinta = ""



                    orden_utilizar = OrdenesSolicitadas()
                    cotizacion = CotizacionesSolicitadas.objects.get(num_solicitud=request.session["numero"])


                    nombre_cliente = models.Clientes.objects.get(nombre=cotizacion.nombre_cliente)
                    try:
                        cliente_ot = nombre_cliente.client_razon_social.get(nombre=cotizacion.nombre_cliente)
                    except models.Clientes_ot.DoesNotExist:
                         return HttpResponseRedirect(reverse("error01"))


                    orden_utilizar.nombre_cliente_ot= cliente_ot
                    orden_utilizar.trabajo_ot = request.session['trabajo']
                    orden_utilizar.cantidad_ot = request.session['cantidad']

                    orden_utilizar.vendedor_ot = request.user
                    orden_utilizar.tipo_trabajo_ot = request.session['tipo_trabajo']
                    orden_utilizar.material_ot = request.session['material']
                    orden_utilizar.descripcion_material_ot = request.session['descripcion_material']
                    orden_utilizar.medida_alto_ot = request.session['medida_alto']
                    orden_utilizar.medida_ancho_ot = request.session['medida_ancho']
                    if request.POST.get("nombre_pantonest1"):
                        orden_utilizar.impresion_tiro_ot = request.session['impresion_tiro'] + " Colores: " +  request.POST.get("nombre_pantonest1")
                    else:
                        orden_utilizar.impresion_tiro_ot = request.session['impresion_tiro']
                    if request.POST.get("nombre_pantonesr1"):
                        orden_utilizar.impresion_retiro_ot = request.session['impresion_retiro'] + " Colores: " +  request.POST.get("nombre_pantonesr1")
                    else:
                        orden_utilizar.impresion_retiro_ot = request.session['impresion_retiro']
                    orden_utilizar.uv_ot = request.session['uv']
                    orden_utilizar.laminado_ot = request.session['laminado']
                    orden_utilizar.troquelado_ot = request.session['troquelado']

                    orden_utilizar.material2_ot = request.session['material2']
                    orden_utilizar.descripcion_material2_ot = request.session['descripcion_material2']
                    orden_utilizar.medida_alto_2_ot = request.session['medida_alto_2']
                    orden_utilizar.medida_ancho_2_ot = request.session['medida_ancho_2']
                    orden_utilizar.impresion_tiro2_ot = request.session['impresion_tiro2']
                    orden_utilizar.impresion_retiro2_ot = request.session['impresion_retiro2']
                    orden_utilizar.uv2_ot = request.session['uv2']
                    orden_utilizar.laminado2_ot = request.session['laminado2']
                    orden_utilizar.troquelado2_ot = request.session['troquelado2']

                    orden_utilizar.material3_ot = request.session['material3']
                    orden_utilizar.descripcion_material3_ot = request.session['descripcion_material3']
                    orden_utilizar.medida_alto_3_ot = request.session['medida_alto_3']
                    orden_utilizar.medida_ancho_3_ot = request.session['medida_ancho_3']
                    orden_utilizar.impresion_tiro3_ot = request.session['impresion_tiro3']
                    orden_utilizar.impresion_retiro3_ot = request.session['impresion_retiro3']
                    orden_utilizar.uv3_ot = request.session['uv3']
                    orden_utilizar.laminado3_ot = request.session['laminado3']
                    orden_utilizar.troquelado3_ot = request.session['troquelado3']


                    orden_utilizar.material4_ot = request.session['material4']
                    orden_utilizar.descripcion_material4_ot = request.session['descripcion_material4']
                    orden_utilizar.medida_alto_4_ot = request.session['medida_alto_4']
                    orden_utilizar.medida_ancho_4_ot = request.session['medida_ancho_4']
                    orden_utilizar.impresion_tiro4_ot = request.session['impresion_tiro4']
                    orden_utilizar.impresion_retiro4_ot = request.session['impresion_retiro4']
                    orden_utilizar.uv4_ot = request.session['uv4']
                    orden_utilizar.laminado4_ot = request.session['laminado4']
                    orden_utilizar.troquelado4_ot = request.session['troquelado4']


                    orden_utilizar.material5_ot = request.session['material5']
                    orden_utilizar.descripcion_material5_ot = request.session['descripcion_material5']
                    orden_utilizar.medida_alto_5_ot = request.session['medida_alto_5']
                    orden_utilizar.medida_ancho_5_ot = request.session['medida_ancho_5']
                    orden_utilizar.impresion_tiro5_ot = request.session['impresion_tiro5']
                    orden_utilizar.impresion_retiro5_ot = request.session['impresion_retiro5']
                    orden_utilizar.uv5_ot = request.session['uv5']
                    orden_utilizar.laminado5_ot = request.session['laminado5']
                    orden_utilizar.troquelado5_ot = request.session['troquelado5']


                    orden_utilizar.detalles_ot = request.session['detalles']

                    if orden_utilizar.detalles_ot != "":
                        detalle = orden_utilizar.detalles_ot.split("\n")
                        ver_cinta = detalle[0].split()

                        detalle[0] = detalle[0].split()

                        try:
                            if detalle[0][4] == "roja" or detalle[0][4] == "blanca":
                                texto = detalle[0][8:] + detalle[1:]
                                print(texto)
                                if len(texto) != 0:
                                    texto2 = " ".join(texto)
                                    orden_utilizar.detalles_ot = texto2
                        except:

                            pass



                    orden_encontrada = orden_utilizar
                    data = {"nombre_cliente_ot":orden_encontrada.nombre_cliente_ot,"trabajo_ot":orden_encontrada.trabajo_ot,"cantidad_ot":orden_encontrada.cantidad_ot}
                    orden = Solicitud_ot_aprobacion(user=request.user,data=data)
                    orden.fields["nombre_cliente_ot"].disabled = True
                    orden.fields["nombre_cliente_ot"].initial = orden_encontrada.nombre_cliente_ot
                    orden.fields["trabajo_ot"].disabled = True
                    orden.fields["trabajo_ot"].initial = orden_encontrada.trabajo_ot
                    orden.fields["cantidad_ot"].disabled = True
                    orden.fields["cantidad_ot"].initial = orden_encontrada.cantidad_ot
                    print(orden_encontrada.impresion_tiro_ot)

                    busqueda = True
                    tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                    materiales = models.Materiales.objects.all().order_by("material")
                    aprobada = True
                    request.session["tipo_de_trabajo"] = request.session["tipo_trabajo"]
                    request.session["tipo_trabajo"] = ""

                    return render(request, "solicitud_ot.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"cotizacion":cotizacion,"ver_cinta":ver_cinta,"aprobada":aprobada,"orden":orden,"tipo_trabajo":tipo_trabajo,"materiales":materiales,"busqueda":busqueda,"orden_encontrada":orden_encontrada,"cotizaciones_existentes":cotizaciones_existentes} )


            if request.method == "POST" and request.POST.get("Buscar"):
                ot = request.POST.get("ot_reutilizar")
                ver_cinta = ""
                aprobada = False
                try:
                    orden_encontrada = models.OrdenesSolicitadas.objects.get(num_solicitud_ot = ot)
                    cliente_nombre = str(orden_encontrada.nombre_cliente_ot)
                    print(cliente_nombre)
                    cliente_nombre = cliente_nombre.split()
                    del cliente_nombre[0]
                    cliente_nombre = " ".join(cliente_nombre)
                    cliente_encontrado = models.Clientes_ot.objects.get(nombre_razon_social=cliente_nombre)
                    if cliente_encontrado.desactivado == True:
                        return HttpResponseRedirect(reverse("error01"))
                    print("AQUI",orden_encontrada)
                    if orden_encontrada.detalles_ot != "":
                        detalle = orden_encontrada.detalles_ot.split("\n")
                        ver_cinta = detalle[0].split()

                        detalle[0] = detalle[0].split()

                        try:
                            if detalle[0][4] == "roja" or detalle[0][4] == "blanca":
                                texto = detalle[0][8:] + detalle[1:]
                                print(texto)
                                if len(texto) != 0:
                                    texto2 = " ".join(texto)
                                    orden_encontrada.detalles_ot = texto2
                        except:

                            pass



                    if orden_encontrada.numero_cotizacion_ot != "":
                        detalle = orden_encontrada.detalles_ot.split("\n")
                        texto_cot_papyrus = detalle[-1].split()
                        if len(texto_cot_papyrus) != 0:
                            texto_cot_papyrus = texto_cot_papyrus[-1].split()
                            print(texto_cot_papyrus[0][0])
                            if texto_cot_papyrus[0][0] == "#":
                                print("si")
                                detalles_finales = orden_encontrada.detalles_ot.split("\n")
                                print(detalles_finales)
                                referencia = detalles_finales[-1].split()
                                print(referencia)
                                referencia[-1] = "#" + str(orden_encontrada.numero_cotizacion_ot)
                                print(referencia)
                                referencia = " ".join(referencia)
                                print(referencia)
                                detalles_finales[-1] = referencia
                                orden_encontrada.detalles_ot = " ".join(detalles_finales)
                        else:
                            orden_encontrada.detalles_ot += "\n" + "Referencia COT PAPYRUS #" + str(orden_encontrada.numero_cotizacion_ot)
                    data = {"nombre_cliente_ot":orden_encontrada.nombre_cliente_ot,"trabajo_ot":orden_encontrada.trabajo_ot,"cantidad_ot":orden_encontrada.cantidad_ot}
                    orden = Solicitud_ot(user=request.user,data=data)

                except OrdenesSolicitadas.DoesNotExist:
                    orden_encontrada = "NO HAY"
                    orden = Solicitud_ot(request.user)
                busqueda = True
                tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                materiales = models.Materiales.objects.all().order_by("material")


                return render(request, "solicitud_ot.html",{"ordenes_por_confirmar":ordenes_por_confirmar,"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"ordenes_existentes":ordenes_existentes,"ver_cinta":ver_cinta,"orden":orden,"tipo_trabajo":tipo_trabajo,"materiales":materiales,"busqueda":busqueda,"orden_encontrada":orden_encontrada,"cotizaciones_existentes":cotizaciones_existentes} )

            if request.method == 'POST' and request.POST.get("solicitud"):



                #data = {"nombre_cliente_ot":request.session["nombre_cliente"],"trabajo_ot":request.session["trabajo"],"cantidad_ot":request.session["cantidad"]}
                orden = Solicitud_ot(user=request.user)

                print("orden valida")
                cotizacion = CotizacionesSolicitadas.objects.get(num_solicitud=request.session["numero"])

                stock = orden.save(commit=False)
                print(request.session["trabajo"])
                stock.vendedor_ot = request.user
                nombre_cliente = models.Clientes.objects.get(nombre=cotizacion.nombre_cliente)
                cliente_ot = nombre_cliente.client_razon_social.get(nombre=cotizacion.nombre_cliente)
                stock.nombre_cliente_ot = cliente_ot
                stock.cantidad_ot = request.session["cantidad"]
                stock.trabajo_ot = request.session["trabajo"]

                stock.direccion_entrega = request.POST.get("direccion")
                stock.persona_recibe = request.POST.get("persona")
                stock.forma_empaque = request.POST.get("empaque")

                stock.tipo_impresion = request.POST.get("tipo_impresion")
                if request.POST.get("arte") == "on":
                    stock.arte = True
                if request.POST.get("dummie") == "on":
                    stock.dummie = True
                if request.POST.get("machote") == "on":
                    stock.machote = True
                if request.POST.get("prueba_de_color") == "on":
                    stock.prueba_de_color = True
                if request.POST.get("muestra_real") == "on":
                    stock.muestra_real = True

                stock.tipo_trabajo_ot = request.session['tipo_de_trabajo']
                stock.material_ot = request.session['material']
                stock.descripcion_material_ot = request.session['descripcion_material']
                stock.medida_alto_ot = request.session['medida_alto']
                stock.medida_ancho_ot = request.session['medida_ancho']
                if request.POST.get("nombre_pantonest1"):
                    stock.impresion_tiro_ot = request.session['impresion_tiro'] + " Colores: " +  request.POST.get("nombre_pantonest1")
                else:
                    stock.impresion_tiro_ot = request.session['impresion_tiro']
                if request.POST.get("nombre_pantonesr1"):
                    stock.impresion_retiro_ot = request.session['impresion_retiro'] + " Colores: " +  request.POST.get("nombre_pantonesr1")
                else:
                    stock.impresion_retiro_ot = request.session['impresion_retiro']
                stock.uv_ot = request.session['uv']
                stock.laminado_ot = request.session['laminado']
                stock.troquelado_ot = request.session['troquelado']

                stock.material2_ot = request.session['material2']
                stock.descripcion_material2_ot = request.session['descripcion_material2']
                stock.medida_alto_2_ot = request.session['medida_alto_2']
                stock.medida_ancho_2_ot = request.session['medida_ancho_2']
                if request.POST.get("nombre_pantonest2"):
                    stock.impresion_tiro2_ot = request.session['impresion_tiro2'] + " Colores: " +  request.POST.get("nombre_pantonest2")
                else:
                    stock.impresion_tiro2_ot = request.session['impresion_tiro2']
                if request.POST.get("nombre_pantonesr2"):
                    stock.impresion_retiro2_ot = request.session['impresion_retiro2'] + " Colores: " +  request.POST.get("nombre_pantonesr2")
                else:
                    stock.impresion_retiro2_ot = request.session['impresion_retiro2']
                stock.uv2_ot = request.session['uv2']
                stock.laminado2_ot = request.session['laminado2']
                stock.troquelado2_ot = request.session['troquelado2']

                stock.material3_ot = request.session['material3']
                stock.descripcion_material3_ot = request.session['descripcion_material3']
                stock.medida_alto_3_ot = request.session['medida_alto_3']
                stock.medida_ancho_3_ot = request.session['medida_ancho_3']
                if request.POST.get("nombre_pantonest3"):
                    stock.impresion_tiro3_ot = request.session['impresion_tiro3'] + " Colores: " +  request.POST.get("nombre_pantonest3")
                else:
                    stock.impresion_tiro3_ot = request.session['impresion_tiro3']
                if request.POST.get("nombre_pantonesr3"):
                    stock.impresion_retiro3_ot = request.session['impresion_retiro3'] + " Colores: " +  request.POST.get("nombre_pantonesr3")
                else:
                    stock.impresion_retiro3_ot = request.session['impresion_retiro3']
                stock.uv3_ot = request.session['uv3']
                stock.laminado3_ot = request.session['laminado3']
                stock.troquelado3_ot = request.session['troquelado3']


                stock.material4_ot = request.session['material4']
                stock.descripcion_material4_ot = request.session['descripcion_material4']
                stock.medida_alto_4_ot = request.session['medida_alto_4']
                stock.medida_ancho_4_ot = request.session['medida_ancho_4']
                if request.POST.get("nombre_pantonest4"):
                    stock.impresion_tiro4_ot = request.session['impresion_tiro4'] + " Colores: " +  request.POST.get("nombre_pantonest4")
                else:
                    stock.impresion_tiro4_ot = request.session['impresion_tiro4']
                if request.POST.get("nombre_pantonesr4"):
                    stock.impresion_retiro4_ot = request.session['impresion_retiro4'] + " Colores: " +  request.POST.get("nombre_pantonesr4")
                else:
                    stock.impresion_retiro4_ot = request.session['impresion_retiro4']
                stock.uv4_ot = request.session['uv4']
                stock.laminado4_ot = request.session['laminado4']
                stock.troquelado4_ot = request.session['troquelado4']


                stock.material5_ot = request.session['material5']
                stock.descripcion_material5_ot = request.session['descripcion_material5']
                stock.medida_alto_5_ot = request.session['medida_alto_5']
                stock.medida_ancho_5_ot = request.session['medida_ancho_5']
                if request.POST.get("nombre_pantonest5"):
                    stock.impresion_tiro5_ot = request.session['impresion_tiro5'] + " Colores: " +  request.POST.get("nombre_pantonest5")
                else:
                    stock.impresion_tiro5_ot = request.session['impresion_tiro5']
                if request.POST.get("nombre_pantonesr5"):
                    stock.impresion_retiro5_ot = request.session['impresion_retiro5'] + " Colores: " +  request.POST.get("nombre_pantonesr5")
                else:
                    stock.impresion_retiro5_ot = request.session['impresion_retiro5']
                stock.uv5_ot = request.session['uv5']
                stock.laminado5_ot = request.session['laminado5']
                stock.troquelado5_ot = request.session['troquelado5']


                stock.detalles_ot = ""
                if request.POST.get("cantidad_cintas") != None:

                    stock.detalles_ot = str(request.POST.get("cantidad_cintas")) + " pedazos de " + str(request.POST.get("tipo_cinta"))
                    stock.detalles_ot += " de " + str(request.POST.get("cm_cintas")) + " cms" + "\n"
                if request.POST.get("adicional"):

                    stock.detalles_ot += request.POST.get("adicional") + request.POST.get("adicional_texto")+ "\n"



                stock.detalles_ot += request.POST.get("detalles")

                if request.POST.get("solicitud"):
                    stock.numero_cotizacion_ot = request.POST.get("cotizacion")

                stock.save()
                numero_solicitud = models.OrdenesSolicitadas.objects.all().last()
                cotizacion.solicitud_ot = numero_solicitud.num_solicitud_ot
                cotizacion.save()
                request.session["tipo_trabajo"] = ""
                solicitado = True
                busqueda = False
                ot_modelo = models.TipoDeTrabajo.objects.all()

                tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                materiales = models.Materiales.objects.all().order_by("material")

                return render(request, 'solicitud_ot.html', {"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"busqueda":busqueda,"cotizaciones_existentes":cotizaciones_existentes,"numero_solicitud":numero_solicitud,"orden":orden,"solicitado":solicitado,"materiales":materiales, "tipo_trabajo":tipo_trabajo, "ordenes_existentes":ordenes_existentes})


            if request.method == 'POST':

                orden = Solicitud_ot(user=request.user,data=request.POST)
                if orden.is_valid():
                    print("orden valida")
                    stock = orden.save(commit=False)
                    stock.vendedor_ot = request.user

                    stock.direccion_entrega = request.POST.get("direccion")
                    stock.persona_recibe = request.POST.get("persona")
                    stock.forma_empaque = request.POST.get("empaque")

                    stock.tipo_trabajo_ot = request.POST.get("opciones")
                    stock.material_ot = request.POST.get("material1")
                    stock.descripcion_material_ot = request.POST.get("descripcion")
                    stock.medida_alto_ot = request.POST.get("alto1")
                    stock.medida_ancho_ot = request.POST.get("ancho1")
                    stock.impresion_tiro_ot = request.POST.get("num_pantonest1") + " " + request.POST.get("impresiont1")
                    stock.impresion_retiro_ot = request.POST.get("num_pantonesr1") + " " + request.POST.get("impresionr1")

                    stock.uv_ot = request.POST.get("uv1")
                    stock.laminado_ot = request.POST.get("laminado1")
                    if request.POST.get("troquel1"):
                        stock.troquelado_ot = str(request.POST.get("troquel1")) + " " +  str(request.POST.get("troquel_existente1"))
                    else:
                        stock.troquelado_ot = str(request.POST.get("troqueladh1")) + " " + str(request.POST.get("troquel_existente1"))

                    stock.material2_ot = request.POST.get("material2")
                    stock.descripcion_material2_ot = request.POST.get("descripcion2")
                    stock.medida_alto_2_ot = request.POST.get("alto2")
                    stock.medida_ancho_2_ot = request.POST.get("ancho2")
                    stock.impresion_tiro2_ot = str(request.POST.get("num_pantonest2")) + " " + str(request.POST.get("impresiont2"))
                    stock.impresion_retiro2_ot = str(request.POST.get("num_pantonesr2")) + " " + str(request.POST.get("impresionr2"))
                    stock.uv2_ot = request.POST.get("uv2")
                    stock.laminado2_ot = request.POST.get("laminado2")
                    if request.POST.get("troquel2"):
                        stock.troquelado2_ot = str(request.POST.get("troquel2")) + " " +  str(request.POST.get("troquel_existente2"))
                    else:
                        stock.troquelado2_ot = str(request.POST.get("troqueladh2")) + " " + str(request.POST.get("troquel_existente2"))
                    stock.material3_ot = request.POST.get("material3")
                    stock.descripcion_material3_ot = request.POST.get("descripcion3")
                    stock.medida_alto_3_ot = request.POST.get("alto3")
                    stock.medida_ancho_3_ot = request.POST.get("ancho3")
                    stock.impresion_tiro3_ot = str(request.POST.get("num_pantonest3")) + " " + str(request.POST.get("impresiont3"))
                    stock.impresion_retiro3_ot = str(request.POST.get("num_pantonesr3")) + " " + str(request.POST.get("impresionr3"))
                    stock.uv3_ot = request.POST.get("uv3")
                    stock.laminado3_ot = request.POST.get("laminado3")
                    if request.POST.get("troquel3"):
                        stock.troquelado3_ot = str(request.POST.get("troquel3")) + " " +  str(request.POST.get("troquel_existente3"))
                    else:
                        stock.troquelado3_ot = str(request.POST.get("troqueladh3")) + " " + str(request.POST.get("troquel_existente3"))

                    stock.material4_ot = request.POST.get("material4")
                    stock.descripcion_material4_ot = request.POST.get("descripcion4")
                    stock.medida_alto_4_ot = request.POST.get("alto4")
                    stock.medida_ancho_4_ot = request.POST.get("ancho4")
                    stock.impresion_tiro4_ot = str(request.POST.get("num_pantonest4")) + " " + str(request.POST.get("impresiont4"))
                    stock.impresion_retiro4_ot = str(request.POST.get("num_pantonesr4")) + " " + str(request.POST.get("impresionr4"))
                    stock.uv4_ot = request.POST.get("uv4")
                    stock.laminado4_ot = request.POST.get("laminado4")
                    if request.POST.get("troquel4"):
                        stock.troquelado4_ot = str(request.POST.get("troquel4")) + " " +  str(request.POST.get("troquel_existente4"))
                    else:
                        stock.troquelado4_ot = str(request.POST.get("troqueladh4")) + " " + str(request.POST.get("troquel_existente4"))

                    stock.material5_ot = request.POST.get("material5")
                    stock.descripcion_material5_ot = request.POST.get("descripcion5")
                    stock.medida_alto_5_ot = request.POST.get("alto5")
                    stock.medida_ancho_5_ot = request.POST.get("ancho5")
                    stock.impresion_tiro5_ot = str(request.POST.get("num_pantonest5")) + " " + str(request.POST.get("impresiont5"))
                    stock.impresion_retiro5_ot = str(request.POST.get("num_pantonesr5")) + " " + str(request.POST.get("impresionr5"))
                    stock.uv5_ot = request.POST.get("uv5")
                    stock.laminado5_ot = request.POST.get("laminado5")
                    if request.POST.get("troquel5"):
                        stock.troquelado5_ot = str(request.POST.get("troquel5")) + " " +  str(request.POST.get("troquel_existente5"))
                    else:
                        stock.troquelado5_ot = str(request.POST.get("troqueladh5")) + " " + str(request.POST.get("troquel_existente5"))


                    stock.detalles_ot = ""
                    if request.POST.get("cantidad_cintas") != None:

                        stock.detalles_ot = str(request.POST.get("cantidad_cintas")) + " pedazos de " + str(request.POST.get("tipo_cinta"))
                        stock.detalles_ot += " de " + str(request.POST.get("cm_cintas")) + " cms" + "\n"
                    if request.POST.get("adicional"):

                        stock.detalles_ot += request.POST.get("adicional") + request.POST.get("adicional_texto")+ "\n"



                    stock.detalles_ot += request.POST.get("detalles")

                    if request.POST.get("solicitud"):
                        stock.numero_cotizacion_ot = request.POST.get("cotizacion")

                    stock.save()
                    solicitado = True
                    busqueda = False
                    ot_modelo = models.TipoDeTrabajo.objects.all()
                    numero_solicitud = models.OrdenesSolicitadas.objects.all().last()
                    tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                    materiales = models.Materiales.objects.all().order_by("material")
                    # do something.

                    nombre_con_codigo = models.OrdenesSolicitadas.objects.get(num_solicitud_ot=numero_solicitud.num_solicitud_ot)
                    cotizacion = Solicitud_cot(user=request.user)

                    nombre_sin_codigo = str(nombre_con_codigo.nombre_cliente_ot).split()
                    del nombre_sin_codigo[0]
                    nombre_sin_codigo = " ".join(nombre_sin_codigo)
                    stock2 = cotizacion.save(commit=False)
                    stock2.cantidad = stock.cantidad_ot
                    stock2.trabajo = stock.trabajo_ot
                    print(nombre_sin_codigo)
                    nombre_cliente = models.Clientes_ot.objects.get(nombre_razon_social=nombre_sin_codigo)
                    #cliente_ot = nombre_cliente.client_razon_social.get(nombre=cotizacion.nombre_cliente)


                    stock2.nombre_cliente = nombre_cliente.nombre
                    stock2.vendedor = request.user
                    stock2.tipo_trabajo = request.POST.get("opciones")
                    stock2.material = request.POST.get("material1")
                    stock2.descripcion_material = request.POST.get("descripcion")
                    stock2.medida_alto = request.POST.get("alto1")
                    stock2.medida_ancho = request.POST.get("ancho1")
                    stock2.impresion_tiro = request.POST.get("num_pantonest1") + " " + request.POST.get("impresiont1")
                    stock2.impresion_retiro = request.POST.get("num_pantonesr1") + " " + request.POST.get("impresionr1")

                    stock2.solicitud_ot = numero_solicitud.num_solicitud_ot

                    stock2.uv = request.POST.get("uv1")
                    stock2.laminado = request.POST.get("laminado1")
                    if request.POST.get("troquel1"):
                        stock2.troquelado = str(request.POST.get("troquel1")) + " " +  str(request.POST.get("troquel_existente1"))
                    else:
                        stock2.troquelado = str(request.POST.get("troqueladh1")) + " " + str(request.POST.get("troquel_existente1"))

                    stock2.material2 = request.POST.get("material2")
                    stock2.descripcion_material2 = request.POST.get("descripcion2")
                    stock2.medida_alto_2 = request.POST.get("alto2")
                    stock2.medida_ancho_2 = request.POST.get("ancho2")
                    stock2.impresion_tiro2 = str(request.POST.get("num_pantonest2")) + " " + str(request.POST.get("impresiont2"))
                    stock2.impresion_retiro2 = str(request.POST.get("num_pantonesr2")) + " " + str(request.POST.get("impresionr2"))
                    stock2.uv2 = request.POST.get("uv2")
                    stock2.laminado2 = request.POST.get("laminado2")
                    if request.POST.get("troquel2"):
                        stock2.troquelado2 = str(request.POST.get("troquel2")) + " " +  str(request.POST.get("troquel_existente2"))
                    else:
                        stock2.troquelado2 = str(request.POST.get("troqueladh2")) + " " + str(request.POST.get("troquel_existente2"))
                    stock2.material3 = request.POST.get("material3")
                    stock2.descripcion_material3 = request.POST.get("descripcion3")
                    stock2.medida_alto_3 = request.POST.get("alto3")
                    stock2.medida_ancho_3 = request.POST.get("ancho3")
                    stock2.impresion_tiro3 = str(request.POST.get("num_pantonest3")) + " " + str(request.POST.get("impresiont3"))
                    stock2.impresion_retiro3 = str(request.POST.get("num_pantonesr3")) + " " + str(request.POST.get("impresionr3"))
                    stock2.uv3 = request.POST.get("uv3")
                    stock2.laminado3 = request.POST.get("laminado3")
                    if request.POST.get("troquel3"):
                        stock2.troquelado3 = str(request.POST.get("troquel3")) + " " +  str(request.POST.get("troquel_existente3"))
                    else:
                        stock2.troquelado3 = str(request.POST.get("troqueladh3")) + " " + str(request.POST.get("troquel_existente3"))

                    stock2.material4 = request.POST.get("material4")
                    stock2.descripcion_material4 = request.POST.get("descripcion4")
                    stock2.medida_alto_4 = request.POST.get("alto4")
                    stock2.medida_ancho_4 = request.POST.get("ancho4")
                    stock2.impresion_tiro4 = str(request.POST.get("num_pantonest4")) + " " + str(request.POST.get("impresiont4"))
                    stock2.impresion_retiro4 = str(request.POST.get("num_pantonesr4")) + " " + str(request.POST.get("impresionr4"))
                    stock2.uv4 = request.POST.get("uv4")
                    stock2.laminado4 = request.POST.get("laminado4")
                    if request.POST.get("troquel4"):
                        stock2.troquelado4 = str(request.POST.get("troquel4")) + " " +  str(request.POST.get("troquel_existente4"))
                    else:
                        stock2.troquelado4 = str(request.POST.get("troqueladh4")) + " " + str(request.POST.get("troquel_existente4"))

                    stock2.material5 = request.POST.get("material5")
                    stock2.descripcion_material5 = request.POST.get("descripcion5")
                    stock2.medida_alto_5 = request.POST.get("alto5")
                    stock2.medida_ancho_5 = request.POST.get("ancho5")
                    stock2.impresion_tiro5 = str(request.POST.get("num_pantonest5")) + " " + str(request.POST.get("impresiont5"))
                    stock2.impresion_retiro5 = str(request.POST.get("num_pantonesr5")) + " " + str(request.POST.get("impresionr5"))
                    stock2.uv5 = request.POST.get("uv5")
                    stock2.laminado5 = request.POST.get("laminado5")
                    if request.POST.get("troquel5"):
                        stock2.troquelado5 = str(request.POST.get("troquel5")) + " " +  str(request.POST.get("troquel_existente5"))
                    else:
                        stock2.troquelado5 = str(request.POST.get("troqueladh5")) + " " + str(request.POST.get("troquel_existente5"))


                    stock2.detalles = ""
                    if request.POST.get("cantidad_cintas") != None:

                        stock2.detalles = str(request.POST.get("cantidad_cintas")) + " pedazos de " + str(request.POST.get("tipo_cinta"))
                        stock2.detalles += " de " + str(request.POST.get("cm_cintas")) + " cms" + "\n"
                    if request.POST.get("adicional"):

                        stock2.detalles += request.POST.get("adicional") + request.POST.get("adicional_texto")+ "\n"



                    stock2.detalles += request.POST.get("detalles")
                    if "imagen" in request.FILES:
                        stock2.imagen = request.FILES["imagen"]


                    stock2.save()
                    num_solicitud_cot = models.CotizacionesSolicitadas.objects.all().last()
                    stock = models.OrdenesSolicitadas.objects.all().last()
                    stock.solicitud_cot = num_solicitud_cot.num_solicitud
                    stock.save()

                return render(request, 'solicitud_ot.html', {"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"busqueda":busqueda,"cotizaciones_existentes":cotizaciones_existentes,"numero_solicitud":numero_solicitud,"orden":orden,"solicitado":solicitado,"materiales":materiales, "tipo_trabajo":tipo_trabajo, "ordenes_existentes":ordenes_existentes})

            else:
                orden = Solicitud_ot(user=request.user)
                solicitado = False


                busqueda = False
                ordenes_proceso = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").order_by("fecha_entrega_ot")
                ordenes_por_fecha = OrdenesSolicitadas.objects.all().exclude(estado_ot__exact="Cerrada").exclude(estado_ot__exact="Por aperturar").filter(fecha_entrega_ot=None).order_by("fecha_entrega_ot")

                tipo_trabajo = models.TipoDeTrabajo.objects.all().order_by("trabajo")
                materiales = models.Materiales.objects.all().order_by("material")

                return render(request, 'solicitud_ot.html', {"ordenes_proceso":ordenes_proceso,"ordenes_por_fecha":ordenes_por_fecha,"busqueda":busqueda,"cotizaciones_existentes":cotizaciones_existentes,"numero_solicitud":numero_solicitud,"orden":orden,"solicitado":solicitado,"materiales":materiales, "tipo_trabajo":tipo_trabajo, "ordenes_existentes":ordenes_existentes})
